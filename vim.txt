Vim can be installed using "sudo apt-get install vim" on Linux. On Windows, your best bet is to install a shell like Git Bash that includes vim as a feature. Vim is a text editor, both much more primitive and much more capable than the contemporary graphics-heavy GUI-based word processors that you are likely to be familiar with.

Once Vim has been installed, you can initialize it by typing "vim <filename>.txt" into your shell. If <filename> is replaced by an already existing file, that file will be opened for editing in Vim. If the name you use is that of a file that does not yet exist, then Vim will create such a file for you. Note that .txt can be replaced by other extensions, such as .clj, .py, .js, and so on. Once opened, you can begin typing by pressing the i key, which stands for "insert." The left and right keys scroll as usual for a word processor, and holding shift while pressing them scrolls by word rather than by letter. You can save by hitting esc : w enter, and quit with esc : q enter. esc : wq enter will save and quit. The esc is only necessary if you're already in insert mode. Pressing esc exits insert mode, while pressing colon opens  a dialogue so you can enter commands, like writing a file or quitting. If you're currently typing text into a buffer that has not been saved to a named file, then you can create a file by pressing : w <filename.txt> and vim will create a new file.

A "buffer" is one of those objects in computing that is extremely basic, and, for that exact reason, a little difficult to explain. One explanation I've read defined a buffer as a file read into memory; it then said that buffers need not be associated with a file. It's this kind of contradictory writing that can be so intimidating for non-IT people (or people new to IT), so let me make it more clear: a buffer is just a place in memory. It's just a space in you're computer's memory that Vim is using to store text right now. That space in memory might get stored as a file on your hard drive, or it may be wiped out completely if you don't save it. Either way, a buffer is basically just a chunk of memory that Vim has temporarily claimed. When Vim creates a new buffer, it just claims a chunk of memory that you can write things into, which it can expand or shrink as needed.

To configure Vim and customize it to your liking, you'll want to cd into either etc/ or etc/vim and use vim itself to open the vimrc file. Scroll down until you see "set showmatch" and remove the quotation mark before the word "set", which will un-comment it and cause Vim to colorize matching brackets whenever your cursor is hovering over or next to one. This is an extremely useful setting when writing code, and since anyone who uses vim presumably knows how to code, this setting ought to be used.
